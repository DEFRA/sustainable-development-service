openapi: 3.0.0
info:
  description: Wildlife Licencing API definition
  version: 1.0.0
  title: Wildlife Licencing
  contact:
    email: graham.willis@defra.gov.uk
  license:
    name: The Open Government Licence (OGL) Version 3
    url: www.nationalarchives.gov.uk/doc/open-government-licence/version/3
paths:
  '/users':
    post:
      description: Create and store user
      summary: Create a new user with a generated ID
      operationId: postUser
      responses:
        201:
          description: The user has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

  '/users/{userId}':
    get:
      description: Reterive a user
      summary: Reterive a user
      operationId: getUserByUserId
      parameters:
        - name: userId
          in: path
          description: ID of the appliciant
          required: true
          example: 1e470963-e8bf-41f5-9b0b-52d19c21cb75
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        400:
          description: Bad request. User ID must be a uuid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: An user with the specified ID was not found.
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

    put:
      description: Store a user
      summary:  Create or update a user using the provided ID.
      operationId: putUser
      parameters:
        - name: userId
          in: path
          description: ID of the user
          required: true
          example: 1e470963-e8bf-41f5-9b0b-52d19c21cb75
          schema:
            $ref: '#/components/schemas/uuid'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sddsId:
                  $ref: '#/components/schemas/uuid'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        400:
          description: Bad request. user ID must be a uuid
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

    delete:
      description: Delete user
      summary:  Delete the user on the provided ID
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: ID of the user
          required: true
          example: 1e470963-e8bf-41f5-9b0b-52d19c21cb75
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        204:
          description: The appliciant object has been deleted
        400:
          description: Bad request. user ID must be a uuid
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

  '/users/{userId}/applications':
    post:
      description: Create a new application
      summary: Create a new application for a given user on a generated ID
      operationId: postApplication
      parameters:
        - name: userId
          in: path
          description: ID of the user
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        201:
          description: The application object has been created
        400:
          description: Bad request. user ID must be a uuid
        500:
          description: Unexpected error on server


  '/applicant/{userId}/applications':
    get:
      description: get a list of applications created by a given user
      parameters:
        - name: userId
          in: path
          description: ID of the user
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        200:
          description: An array of application objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/applications'
        400:
          description: Bad request. user ID must be a uuid
        401:
          description: Unauthorized
        404:
          description: An user with the specified user ID was not found
        500:
          description: Unexpected error on server

  '/applicant/{userId}/application/{applicationId}':
    get:
      description: an applications created by a specific applicant
      parameters:
        - name: userId
          in: path
          description: ID of the user
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
        - name: applicationId
          in: path
          description: ID of the application
          required: true
          schema:
            $ref: '#/components/schemas/uuid'

      responses:
        200:
          description: An application object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/application'
        400:
          description: Bad request.
        401:
          description: Unauthorized
        404:
          description: The specified user ID and application ID was not found
        500:
          description: Unexpected error on server

components:
  schemas:
    user:
      type: object
      required:
        - id
      properties:
        id:
          $ref: '#/components/schemas/uuid'
        applications:
          $ref: '#/components/schemas/applications'

    applications:
      type: array
      items:
        $ref: '#/components/schemas/application'

    application:
      required:
        - id
        - applicant
        - sites
      properties:
        id:
          $ref: '#/components/schemas/uuid'
        applicant:
          $ref: '#/components/schemas/applicant'
        sites:
          $ref: '#/components/schemas/sites'

    sites:
      type: array
      items:
        $ref: '#/components/schemas/site'

    applicant:
      type: object
      required:
        - contact
      properties:
        contact:
          $ref: '#/components/schemas/application'

    contact:
      type: object
      required: [id, firstname, lastname]
      properties:
        id:
          $ref: '#/components/schemas/uuid'
        firstname:
          type: string
          minLength: 1
          maxLength: 36
        lastname:
          type: string
          minLength: 1
          maxLength: 36
        address:
          $ref: '#/components/schemas/address'
        email:
          $ref: '#/components/schemas/email'
        phone:
          $ref: '#/components/schemas/phone'

    address:
      type: object
      required: [addrLine1, addrline3, postcode]
      properties:
        houseNumber:
          type: string
          minLength: 1
          maxLength: 36
        addrline1:
          type: string
          minLength: 1
          maxLength: 36
        addrline2:
          type: string
          minLength: 1
          maxLength: 36
        addrline3:
          type: string
          minLength: 1
          maxLength: 36
        county:
          type: string
          minLength: 1
          maxLength: 36
        town:
          type: string
          minLength: 1
          maxLength: 36
        postcode:
          type: string
          minLength: 1
          maxLength: 10

    site:
      type: object
      required:
        - name
        - address
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 36
        address:
          $ref: '#/components/schemas/address'
        gridReference:
          $ref: '#/components/schemas/gridReference'

    gridReference:
      type: string

    uuid:
      type: string
      pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
      minLength: 36
      maxLength: 36

    email:
      type: string
      pattern: (?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])

    phone:
      type: string

    error:
      type: object
      required:
        - code
      properties:
        code:
          type: number
        error:
          type: object
        errors:
          type: array
          items:
            type: object

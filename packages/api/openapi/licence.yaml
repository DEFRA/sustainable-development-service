openapi: 3.0.0
info:
  description: Wildlife Licencing API definition
  version: 1.0.0
  title: Wildlife Licencing
  contact:
    email: graham.willis@defra.gov.uk
  license:
    name: The Open Government Licence (OGL) Version 3
    url: www.nationalarchives.gov.uk/doc/open-government-licence/version/3
paths:
################################################################################################
# Accounts
################################################################################################
  '/accounts':
    get:
      description: Get a list accounts
      summary: Get a list accounts
      operationId: getAccounts
      parameters:
        - name: userId
          in: query
          description: ID of the user
          required: false
          schema:
            $ref: '#/components/schemas/uuid'
        - name: applicationId
          in: query
          description: ID of the application
          required: false
          schema:
            $ref: '#/components/schemas/uuid'
        - name: role
          in: query
          description: role of the account
          required: false
          schema:
            $ref: '#/components/schemas/accountRoles'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accounts'
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: Not found
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

  '/account':
    post:
      description: Create and store account
      summary: Create a new account with a generated ID
      operationId: postAccount
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/account'
      responses:
        201:
          description: The account has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account'
        400:
          description: Bad request. Username required
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

  '/account/{accountId}':
    get:
      description: Retrieve a account
      summary: Retrieve a account
      operationId: getAccountByAccountId
      parameters:
        - name: accountId
          in: path
          description: ID of the account
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account'
        400:
          description: Bad request. User ID must be a uuid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: A account with the specified ID was not found.
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

    put:
      description: Update a account
      summary: Create or update a account
      operationId: putAccount
      parameters:
        - name: accountId
          in: path
          description: ID of the account
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/account'
      responses:
        200:
          description: The account object has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account'
        201:
          description: The account object has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account'
        400:
          description: Bad request.
        404:
          description: Not found
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

    delete:
      description: Delete account
      summary: Delete the account on the provided ID
      operationId: deleteAccount
      parameters:
        - name: accountId
          in: path
          description: ID of the account
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        204:
          description: The account object has been deleted
        400:
          description: Bad request. account ID must be a uuid
        404:
          description: Not found
        409:
          description: Conflict
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

################################################################################################
# Applications
################################################################################################
  '/applications':
    get:
      description: Get the applications for a user
      summary: Get the applications for a user
      operationId: getApplications
      parameters:
        - name: userId
          in: query
          description: ID of the user
          required: false
          schema:
            $ref: '#/components/schemas/uuid'
        - name: role
          in: query
          description: ID of the user
          required: false
          schema:
            $ref: '#/components/schemas/roles'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/applications'
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: Not found
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

  '/application':
    post:
      description: Create a new application
      summary: Create a new application for an existing userId
      operationId: postApplication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/application'
      responses:
        201:
          description: The application object has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/application'
        400:
          description: Bad request. user ID must be a uuid
        404:
          description: Not found
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

  '/application/{applicationId}':
    get:
      description: Get an application
      summary: Get an application
      operationId: getApplicationByApplicationId
      parameters:
        - name: applicationId
          in: path
          description: ID of the application
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/application'
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: Application not found
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

    put:
      description: Update an application
      summary: Create or update an application for a given applicationId
      operationId: putApplication
      parameters:
        - name: applicationId
          in: path
          description: ID of the application
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/application'
      responses:
        200:
          description: The application object has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/application'
        201:
          description: The application object has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/application'
        400:
          description: Bad request.
        404:
          description: Not found
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

    delete:
      description: Delete an application
      summary: Delete an application
      operationId: deleteApplication
      parameters:
        - name: applicationId
          in: path
          description: ID of the application
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        204:
          description: The application has been deleted
        400:
          description: Bad request
        404:
          description: Not found
        409:
          description: Conflict
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

  /applications/get-reference:
    get:
      description: Get the next reference number for an application
      summary: counter
      operationId: getApplicationReference
      parameters:
        - in: query
          name: applicationTypeId
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        200:
          description: The next reference number
          content:
            application/json:
              schema:
                type: object
                properties:
                  ref:
                    type: string

        404:
          description: Not found - ensure reference data extract has run
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

  '/application/{applicationId}/submit':
    post:
      description: Queue the application for submission
      summary: Queue the application for submission
      operationId: postApplicationSubmit
      parameters:
        - name: applicationId
          in: path
          description: ID of the application
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        204:
          description: Success
        400:
          description: Bad request
        404:
          description: Not found
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

################################################################################################
# ecologist-experience
################################################################################################
  '/application/{applicationId}/ecologist-experience':
    put:
      description: Update the application ecologist-experience details
      summary: Create or update the application ecologist-experience details
      operationId: putEcologistExperience
      parameters:
        - name: applicationId
          in: path
          description: ID of the application
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ecologistExperience'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ecologistExperience'
        400:
          description: Bad request
        404:
          description: Not found
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

    get:
      description: Get the application ecologist-experience details
      summary: Get the ecologist-experience details for an application
      operationId: getEcologistExperience
      parameters:
        - name: applicationId
          in: path
          description: ID of the application
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ecologistExperience'
        400:
          description: Bad request
        404:
          description: Not found
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

    delete:
      description: Delete the application ecologist-experience details
      summary: Delete the ecologist-experience details for an application
      operationId: deleteEcologistExperience
      parameters:
        - name: applicationId
          in: path
          description: ID of the application
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        204:
          description: Success
        400:
          description: Bad request
        404:
          description: Not found
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

################################################################################################
# Eligibility
################################################################################################
  '/application/{applicationId}/eligibility':
    put:
      description: Update the application eligibility details
      summary: Create or update the application eligibility details
      operationId: putApplicationEligibility
      parameters:
        - name: applicationId
          in: path
          description: ID of the application
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/eligibility'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/eligibility'
        400:
          description: Bad request
        404:
          description: Not found
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

    get:
      description: Get the application eligibility details
      summary: Get the eligibility details for an application
      operationId: getApplicationEligibility
      parameters:
        - name: applicationId
          in: path
          description: ID of the application
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/eligibility'
        400:
          description: Bad request
        404:
          description: Not found
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

    delete:
      description: Delete the application eligibility details
      summary: Delete the eligibility details for an application
      operationId: deleteApplicationEligibility
      parameters:
        - name: applicationId
          in: path
          description: ID of the application
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        204:
          description: Success
        400:
          description: Bad request
        404:
          description: Not found
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

################################################################################################
# Licences
################################################################################################
  '/application/{applicationId}/licences':
    get:
      description: Get the licences for an application
      summary: Get the licences for a granted application
      operationId: getApplicationLicences
      parameters:
        - name: applicationId
          in: path
          description: ID of the application
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/licences'
        400:
          description: Bad request
        404:
          description: Not found
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'



################################################################################################
# Application-account
################################################################################################
  '/application-accounts':
    get:
      description: Get application-accounts
      summary: Get application-accounts
      operationId: getApplicationAccounts
      parameters:
        - name: applicationId
          in: query
          description: ID of the application
          required: false
          schema:
            $ref: '#/components/schemas/uuid'
        - name: accountId
          in: query
          description: ID of the account
          required: false
          schema:
            $ref: '#/components/schemas/uuid'
        - name: role
          in: query
          description: The role
          required: false
          schema:
            $ref: '#/components/schemas/accountRoles'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/applicationAccounts'
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: Not found
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

  '/application-account':
    post:
      description: Create and store an application account relationship
      summary: Create a new account with a generated ID
      operationId: postApplicationAccount
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/applicationAccount'
      responses:
        201:
          description: The application-account relationship has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/applicationAccount'
        400:
          description: Bad request. AccountId or applicationId not found. Role not recognized.
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

  '/application-account/{applicationAccountId}':
    get:
      description: Retrieve an application-account
      summary: Retrieve an application-account
      operationId: getApplicationAccountById
      parameters:
        - name: applicationAccountId
          in: path
          description: ID of the application-account
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/applicationAccount'
        400:
          description: Bad request. Application-account ID must be a uuid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: An application-account with the specified ID was not found.
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

    put:
      description: Create of update an application-account
      summary: Create of update an application-account
      operationId: putApplicationAccountById
      parameters:
        - name: applicationAccountId
          in: path
          description: ID of the application-account
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/applicationAccount'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/applicationAccount'
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/applicationAccount'
        400:
          description: Bad request. Application-account ID must be a uuid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: An application-account with the specified ID was not found.
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

    delete:
      description: Delete an application-account
      summary: Delete an application-account
      operationId: deleteApplicationAccountById
      parameters:
        - name: applicationAccountId
          in: path
          description: ID of the application-account
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        204:
          description: The application-account object has been deleted
        400:
          description: Bad request. account ID must be a uuid
        404:
          description: Not found
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

################################################################################################
# Application-contact
################################################################################################
  '/application-contacts':
    get:
      description: Get application-contacts
      summary: Get application-contacts
      operationId: getApplicationContacts
      parameters:
        - name: applicationId
          in: query
          description: ID of the application
          required: false
          schema:
            $ref: '#/components/schemas/uuid'
        - name: contactId
          in: query
          description: ID of the contact
          required: false
          schema:
            $ref: '#/components/schemas/uuid'
        - name: role
          in: query
          description: The role
          required: false
          schema:
            $ref: '#/components/schemas/contactRoles'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/applicationContacts'
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: Not found
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

  '/application-contact':
    post:
      description: Create and store an application contact relationship
      summary: Create a new contact with a generated ID
      operationId: postApplicationContact
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/applicationContact'
      responses:
        201:
          description: The application-contact relationship has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/applicationContact'
        400:
          description: Bad request. ContactId or applicationId not found. Role not recognized.
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

  '/application-contact/{applicationContactId}':
    get:
      description: Retrieve an application-contact
      summary: Retrieve an application-contact
      operationId: getApplicationContactById
      parameters:
        - name: applicationContactId
          in: path
          description: ID of the application-contact
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/applicationContact'
        400:
          description: Bad request. Application-contact ID must be a uuid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: An application-contact with the specified ID was not found.
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

    put:
      description: Create of update an application-contact
      summary: Create of update an application-contact
      operationId: putApplicationContactById
      parameters:
        - name: applicationContactId
          in: path
          description: ID of the application-contact
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/applicationContact'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/applicationContact'
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/applicationContact'
        400:
          description: Bad request. Application-contact ID must be a uuid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: An application-contact with the specified ID was not found.
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

    delete:
      description: Delete an application-contact
      summary: Delete an application-contact
      operationId: deleteApplicationContactById
      parameters:
        - name: applicationContactId
          in: path
          description: ID of the application-contact
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        204:
          description: The application-contact object has been deleted
        400:
          description: Bad request. contact ID must be a uuid
        404:
          description: Not found
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

################################################################################################
# Application File-Uploads
################################################################################################
  '/application/{applicationId}/file-uploads':
    get:
      description: Get a list of the file-uploads detail for an application
      summary: Create or update the application file-upload details
      operationId: getApplicationFileUploads
      parameters:
        - name: applicationId
          in: path
          description: ID of the application
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
        - name: filetype
          in: query
          description: The filetype
          required: false
          schema:
            $ref: '#/components/schemas/filetype'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/applicationFileUploads'
        400:
          description: Bad request
        404:
          description: Not found
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

  '/application/{applicationId}/file-upload':
    post:
      description: Create the application file-upload details
      summary: Create the application file-upload details
      operationId: postApplicationFileUpload
      parameters:
        - name: applicationId
          in: path
          description: ID of the application
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/applicationFileUpload'
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/applicationFileUpload'
        400:
          description: Bad request
        404:
          description: Not found
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

  '/application/{applicationId}/file-upload/{uploadId}':
    put:
      description: Update the application file-upload details
      summary: Create or update the application file-upload details
      operationId: putApplicationFileUpload
      parameters:
        - name: applicationId
          in: path
          description: ID of the application
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
        - name: uploadId
          in: path
          description: ID of the upload
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/applicationFileUpload'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/applicationFileUpload'
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/applicationFileUpload'
        400:
          description: Bad request
        404:
          description: Not found
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

    get:
      description: Get the application file-upload details
      summary: Get the eligibility details for an application file-upload
      operationId: getApplicationFileUpload
      parameters:
        - name: applicationId
          in: path
          description: ID of the application
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
        - name: uploadId
          in: path
          description: ID of the upload
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/applicationFileUpload'
        400:
          description: Bad request
        404:
          description: Not found
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

################################################################################################
# Application Sites
################################################################################################
  '/application-sites':
    get:
      description: Get the application-sites
      summary: Get a list of application-site relationships for a user
      operationId: getApplicationSites
      parameters:
        - name: applicationId
          in: query
          description: ID of the application
          required: false
          schema:
            $ref: '#/components/schemas/uuid'
        - name: siteId
          in: query
          description: ID of the site
          required: false
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/applicationSites'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: Not found
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

  '/application-site':
    post:
      description: Create a new application-site relationship
      summary: Create a new application-site relationship for an existing applicationId and siteId
      operationId: postApplicationSite
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/applicationSite'
      responses:
        201:
          description: The application-site object has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/applicationSite'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: Not found
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

  '/application-site/{applicationSiteId}':
    get:
      description: Get an application-site by id
      summary:  Get an application-site by id
      operationId: getApplicationSiteByApplicationSiteId
      parameters:
        - name: applicationSiteId
          in: path
          description: ID of the application-site
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/applicationSite'
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: The application-site is not found
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

    delete:
      description: Delete an application-site by id
      summary:  Get an application-site by id
      operationId: deleteApplicationSiteByApplicationSiteId
      parameters:
        - name: applicationSiteId
          in: path
          description: ID of the application-site
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        204:
          description: The application-site has been deleted
        400:
          description: Bad request
        404:
          description: The application-site is not found
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

################################################################################################
# Application-user
################################################################################################
  '/application-users':
    get:
      description: Get a list application-users
      summary: Get a list application-users
      operationId: getApplicationUsers
      parameters:
        - name: userId
          in: query
          description: ID of the user
          required: false
          schema:
            $ref: '#/components/schemas/uuid'
        - name: applicationId
          in: query
          description: ID of the user
          required: false
          schema:
            $ref: '#/components/schemas/uuid'
        - name: role
          in: query
          description: ID of the user
          required: false
          schema:
            $ref: '#/components/schemas/roles'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/applicationUsers'
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: Not found
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

  '/application-user':
    post:
      description: Create and store an application user relationship
      summary: Create a new user with a generated ID
      operationId: postApplicationUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/applicationUser'
      responses:
        201:
          description: The application-user relationship has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/applicationUser'
        400:
          description: Bad request. UserId or applicationId not found. Role not recognized.
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

  '/application-user/{applicationUserId}':
    get:
      description: Retrieve an application-user
      summary: Retrieve an application-user
      operationId: getApplicationUserById
      parameters:
        - name: applicationUserId
          in: path
          description: ID of the application-user
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/applicationUser'
        400:
          description: Bad request. Application-user ID must be a uuid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: An application-user with the specified ID was not found.
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    delete:
      description: Delete an application-user
      summary: Delete an application-user
      operationId: deleteApplicationUserById
      parameters:
        - name: applicationUserId
          in: path
          description: ID of the application-user
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        204:
          description: The application-user object has been deleted
        400:
          description: Bad request. user ID must be a uuid
        404:
          description: Not found
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

################################################################################################
# Contacts
################################################################################################
  '/contacts':
    get:
      description: Get a list contacts
      summary: Get a list contacts
      operationId: getContacts
      parameters:
        - name: userId
          in: query
          description: ID of the user
          required: false
          schema:
            $ref: '#/components/schemas/uuid'
        - name: applicationId
          in: query
          description: ID of the application
          required: false
          schema:
            $ref: '#/components/schemas/uuid'
        - name: role
          in: query
          description: role of the contact
          required: false
          schema:
            $ref: '#/components/schemas/contactRoles'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contacts'
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: Not found
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

  '/contact':
    post:
      description: Create and store contact
      summary: Create a new contact with a generated ID
      operationId: postContact
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/contact'
      responses:
        201:
          description: The contact has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contact'
        400:
          description: Bad request. Username required
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

  '/contact/{contactId}':
    get:
      description: Retrieve a contact
      summary: Retrieve a contact
      operationId: getContactByContactId
      parameters:
        - name: contactId
          in: path
          description: ID of the contact
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contact'
        400:
          description: Bad request. User ID must be a uuid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: A contact with the specified ID was not found.
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

    put:
      description: Update a contact
      summary: Create or update a contact
      operationId: putContact
      parameters:
        - name: contactId
          in: path
          description: ID of the contact
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/contact'
      responses:
        200:
          description: The contact object has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contact'
        201:
          description: The contact object has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contact'
        400:
          description: Bad request.
        404:
          description: Not found
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

    delete:
      description: Delete contact
      summary:  Delete the contact on the provided ID
      operationId: deleteContact
      parameters:
        - name: contactId
          in: path
          description: ID of the contact
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        204:
          description: The contact object has been deleted
        400:
          description: Bad request. contact ID must be a uuid
        404:
          description: Not found
        409:
          description: Conflict
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

################################################################################################
# Habitat-Sites. Initially badger sett.
################################################################################################
  '/application/{applicationId}/habitat-site':
    post:
      description: Create a new habitat site for an application
      summary: uses one of the habitat schemas depending on species
      operationId: postHabitatSite
      parameters:
        - name: applicationId
          in: path
          description: ID of the application
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/badgerSett'

      responses:
        201:
          description: The habitat object has been created
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/badgerSett'
        400:
          description: Bad request
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

  '/application/{applicationId}/habitat-sites':
    get:
      description: lists the habitat sites for an application
      summary: uses one of the habitat schemas depending on species
      operationId: getHabitatSitesByApplicationId
      parameters:
        - name: applicationId
          in: path
          description: ID of the application
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/badgerSetts'
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: Not found.
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

  '/application/{applicationId}/habitat-site/{habitatSiteId}':
    get:
      description: Retrieve a habitat site
      summary: Retrieve a habitat site
      operationId: getHabitatSiteByHabitatSiteId
      parameters:
        - name: applicationId
          in: path
          description: ID of the application
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
        - name: habitatSiteId
          in: path
          description: ID of the habitat site
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        200:
          description: The habitat site object
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/badgerSett'
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: Not found.
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

    put:
      description: Update a habitat site
      summary: Create or update a habitat site
      operationId: putHabitatSite
      parameters:
        - name: applicationId
          in: path
          description: ID of the application
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
        - name: habitatSiteId
          in: path
          description: ID of the habitat site
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/badgerSett'
      responses:
        200:
          description: The habitat site object has been updated
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/badgerSett'
        201:
          description: The contact object has been created
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/badgerSett'
        400:
          description: Bad request.
        404:
          description: Not found
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

    delete:
      description: Delete habitat site
      summary:  Delete the habitat site on the provided ID
      operationId: deleteHabitatSite
      parameters:
        - name: applicationId
          in: path
          description: ID of the application
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
        - name: habitatSiteId
          in: path
          description: ID of the habitat site
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        204:
          description: The habitat site object has been deleted
        400:
          description: Bad request.
        404:
          description: Not found
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

################################################################################################
# Sites
################################################################################################
  '/sites':
    get:
      description: Get a list of sites
      summary: Get a list of sites with the ability to filter using the user-sites relation
      operationId: getSites
      parameters:
        - name: userId
          in: query
          description: ID of the user
          required: false
          schema:
            $ref: '#/components/schemas/uuid'
        - name: role
          in: query
          description: ID of the user
          required: false
          schema:
            $ref: '#/components/schemas/roles'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sites'
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: Not found
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

  '/site':
    post:
      description: Create a new site
      summary: Create a new site for an existing userId
      operationId: postSite
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/site'
      responses:
        201:
          description: The application object has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/site'
        400:
          description: Bad request
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

  '/site/{siteId}':
    get:
      description: Get a site
      summary: Get a site
      operationId: getSiteBySiteId
      parameters:
        - name: siteId
          in: path
          description: ID of the site
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/site'
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: Site not found
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

    put:
      description: Create a new site or update an existing site
      summary: Create a new site or update an existing site
      operationId: putSite
      parameters:
        - name: siteId
          in: path
          description: ID of the site
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        200:
          description: The site object has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/site'
        201:
          description: The site object has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/site'
        400:
          description: Bad request. user ID must be a uuid
        404:
          description: Not found
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

    delete:
      description: Delete a site
      summary: Delete a site
      operationId: deleteSite
      parameters:
        - name: siteId
          in: path
          description: ID of the site
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        204:
          description: The site has been deleted
        400:
          description: Bad request
        404:
          description: Not found
        409:
          description: Conflict
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

################################################################################################
# Users
################################################################################################
  '/users':
    get:
      description: Get users
      summary: Get the users and optionally filter by name
      operationId: getUsers
      parameters:
        - in: query
          name: username
          required: false
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users'
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

  '/user':
    post:
      description: Create and store user
      summary: Create a new user with a generated ID
      operationId: postUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
      responses:
        201:
          description: The user has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        400:
          description: Bad request. Username required
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

  '/user/{userId}':
    get:
      description: Reterive a user
      summary: Reterive a user
      operationId: getUserByUserId
      parameters:
        - name: userId
          in: path
          description: ID of the appliciant
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        400:
          description: Bad request. User ID must be a uuid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: An user with the specified ID was not found.
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

    delete:
      description: Delete user
      summary:  Delete the user on the provided ID
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: ID of the user
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        204:
          description: The appliciant object has been deleted
        400:
          description: Bad request. user ID must be a uuid
        404:
          description: Not found
        409:
          description: Conflict
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

################################################################################################
# Reference Data
################################################################################################
  '/application/types':
    get:
      description: Get the application types
      summary: The licence type requested by an application
      operationId: getApplicationTypes
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/applicationTypes'

        404:
          description: Not found
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

  '/application/purposes':
    get:
      description: Get the application purposes
      summary: The purpose of an application
      operationId: getApplicationPurposes
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/referenceDataTypes'
        404:
          description: Not found
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

################################################################################################
# Option sets
################################################################################################
  '/option-sets':
    get:
      description: Get the global option set values
      summary: Get the global option set values
      operationId: getOptionSets
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/optionSetTypes'
        404:
          description: Not found
        500:
          description: Unexpected error on server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'


components:
################################################################################################
#
# Schemas
#
################################################################################################
  schemas:
    users:
      type: array
      items:
        $ref: '#/components/schemas/user'

    accounts:
      type: array
      items:
        $ref: '#/components/schemas/account'

    account:
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/uuid'
        name:
          type: string
          minLength: 1
          maxLength: 36
        contactDetails:
          $ref: '#/components/schemas/contactDetails'
        address:
          $ref: '#/components/schemas/address'
        submitted:
          $ref: '#/components/schemas/timestamp'
        cloneOf:
          $ref: '#/components/schemas/uuid'
        createdAt:
          $ref: '#/components/schemas/timestamp'
        updatedAt:
          $ref: '#/components/schemas/timestamp'

    accountRoles:
      type: string
      enum:
        - APPLICANT-ORGANISATION
        - ECOLOGIST-ORGANISATION

    applications:
      type: array
      items:
        $ref: '#/components/schemas/application'

    application:
      type: object
      additionalProperties: false
      required:
        - applicationTypeId
        - applicationPurposeId
      properties:
        id:
          $ref: '#/components/schemas/uuid'
        applicationTags:
          type: array
          items:
            type: string
        applicationReferenceNumber:
          type: string
          minLength: 13
          maxLength: 30
        proposalDescription:
          type: string
          minLength: 1
          maxLength: 300
        detailsOfConvictions:
          type: string
          minLength: 1
          maxLength: 300
        licenceReason:
          type: string
          minLength: 1
          maxLength: 300
        applicationCategory:
          type: number
        applicationTypeId:
          $ref: '#/components/schemas/uuid'
        applicationPurposeId:
          $ref: '#/components/schemas/uuid'
        eligibility:
          $ref: '#/components/schemas/eligibility'
        ecologistExperience:
          $ref: '#/components/schemas/ecologistExperience'
        statusCode:
          $ref: '#/components/schemas/option'
        submitted:
          $ref: '#/components/schemas/timestamp'
        userSubmission:
          type: boolean
        createdAt:
          $ref: '#/components/schemas/timestamp'
        updatedAt:
          $ref: '#/components/schemas/timestamp'

    eligibility:
      type: object
      properties:
        isOwnerOfLand:
          type: boolean
        hasLandOwnerPermission:
          type: boolean
        permissionsRequired:
          type: boolean
        permissionsGranted:
          type: boolean

    applicationAccounts:
      type: array
      items:
        $ref: '#/components/schemas/applicationAccount'

    applicationAccount:
      type: object
      additionalProperties: false
      required:
        - applicationId
        - accountId
        - accountRole
      properties:
        id:
          $ref: '#/components/schemas/uuid'
        applicationId:
          $ref: '#/components/schemas/uuid'
        accountId:
          $ref: '#/components/schemas/uuid'
        accountRole:
          $ref: '#/components/schemas/accountRoles'
        createdAt:
          $ref: '#/components/schemas/timestamp'
        updatedAt:
          $ref: '#/components/schemas/timestamp'

    applicationContacts:
      type: array
      items:
        $ref: '#/components/schemas/applicationContact'

    applicationContact:
      type: object
      additionalProperties: false
      required:
        - applicationId
        - contactId
        - contactRole
      properties:
        id:
          $ref: '#/components/schemas/uuid'
        applicationId:
          $ref: '#/components/schemas/uuid'
        contactId:
          $ref: '#/components/schemas/uuid'
        contactRole:
          $ref: '#/components/schemas/contactRoles'
        createdAt:
          $ref: '#/components/schemas/timestamp'
        updatedAt:
          $ref: '#/components/schemas/timestamp'

    applicationFileUploads:
      type: array
      items:
        $ref: '#/components/schemas/applicationFileUpload'

    applicationFileUpload:
      type: object
      additionalProperties: false
      required:
        - filetype
        - filename
        - objectKey
      properties:
        id:
          $ref: '#/components/schemas/uuid'
        applicationId:
          $ref: '#/components/schemas/uuid'
        filetype:
          $ref: '#/components/schemas/filetype'
        filename:
          type: string
          maximum: 255
        objectKey:
          $ref: '#/components/schemas/uuid'
        submitted:
          $ref: '#/components/schemas/timestamp'
        createdAt:
          $ref: '#/components/schemas/timestamp'
        updatedAt:
          $ref: '#/components/schemas/timestamp'

    filetype:
      type: string
      enum:
        - MAP
        - METHOD-STATEMENT
        - WORK-SCHEDULE

    applicationSites:
      type: array
      items:
        $ref: '#/components/schemas/applicationSite'

    applicationSite:
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/uuid'
        applicationId:
          $ref: '#/components/schemas/uuid'
        siteId:
          $ref: '#/components/schemas/uuid'
        createdAt:
          $ref: '#/components/schemas/timestamp'
        updatedAt:
          $ref: '#/components/schemas/timestamp'

    applicationUsers:
      type: array
      items:
        $ref: '#/components/schemas/applicationUser'

    applicationUser:
      type: object
      additionalProperties: false
      required:
        - userId
        - applicationId
      properties:
        id:
          $ref: '#/components/schemas/uuid'
        userId:
          $ref: '#/components/schemas/uuid'
        applicationId:
          $ref: '#/components/schemas/uuid'
        role:
          $ref: '#/components/schemas/roles'
        createdAt:
          $ref: '#/components/schemas/timestamp'
        updatedAt:
          $ref: '#/components/schemas/timestamp'

    contacts:
      type: array
      items:
        $ref: '#/components/schemas/contact'

    contact:
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/uuid'
        userId:
          $ref: '#/components/schemas/uuid'
        fullName:
          type: string
          minLength: 1
          maxLength: 160
        contactDetails:
          $ref: '#/components/schemas/contactDetails'
        address:
          $ref: '#/components/schemas/address'
        cloneOf:
          $ref: '#/components/schemas/uuid'
        submitted:
          $ref: '#/components/schemas/timestamp'
        createdAt:
          $ref: '#/components/schemas/timestamp'
        updatedAt:
          $ref: '#/components/schemas/timestamp'

    contactDetails:
      type: object
      properties:
        email:
          $ref: '#/components/schemas/email'
        phone:
          $ref: '#/components/schemas/phone'

    contactRoles:
      type: string
      enum:
        - APPLICANT
        - ECOLOGIST
        - NAMED-INDIVIDUAL

    habitatSite:
      type: object
      required:
        - activityId
        - speciesId
        - methodIds
      properties:
        id:
          $ref: '#/components/schemas/uuid'
        name:
          type: string
          minLength: 1
          maxLength: 100
        activityId:
          $ref: '#/components/schemas/uuid'
        speciesId:
          $ref: '#/components/schemas/uuid'
        methodIds:
          type: array
          items:
            $ref: '#/components/schemas/option'
        startDate:
          $ref: '#/components/schemas/date'
        endDate:
          $ref: '#/components/schemas/date'
        gridReference:
          $ref: '#/components/schemas/gridReference'
        createdAt:
          $ref: '#/components/schemas/timestamp'
        updatedAt:
          $ref: '#/components/schemas/timestamp'

    badgerSetts:
      type: array
      items:
        $ref: '#/components/schemas/badgerSett'

    badgerSett:
      allOf:
        - $ref: '#/components/schemas/habitatSite'
        - type: object
          properties:
            settType:
              $ref: '#/components/schemas/option'
            active:
              type: boolean
            willReopen:
              type: boolean
            numberOfEntrances:
              type: number
              minimum: 1
              maximum: 100

    ecologistExperience:
      type: object
      properties:
        previousLicense:
          type: boolean
        licenseDetails:
          type: array
          items:
            type: string
        experienceDetails:
          type: string
          minLength: 1
          maxLength: 4000
        methodExperience:
          type: string
          minLength: 1
          maxLength: 4000
        classMitigation:
          type: boolean
        classMitigationDetails:
          type: string

    licences:
      type: array
      items:
        $ref: '#/components/schemas/licence'

    licence:
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/uuid'
        applicationId:
          $ref: '#/components/schemas/uuid'
        licenceNumber:
          type: string
        startDate:
          $ref: '#/components/schemas/date'
        endDate:
          $ref: '#/components/schemas/date'
        createdAt:
          $ref: '#/components/schemas/timestamp'
        updatedAt:
          $ref: '#/components/schemas/timestamp'


    sites:
      type: array
      items:
        $ref: '#/components/schemas/site'

    site:
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/uuid'
        name:
          type: string
          minLength: 1
          maxLength: 36
        address:
          $ref: '#/components/schemas/address'
        gridReference:
          $ref: '#/components/schemas/gridReference'
        createdAt:
          $ref: '#/components/schemas/timestamp'
        updatedAt:
          $ref: '#/components/schemas/timestamp'

    user:
      type: object
      additionalProperties: false
      required:
        - username
      properties:
        id:
          $ref: '#/components/schemas/uuid'
        username:
          $ref: '#/components/schemas/email'
        createdAt:
          $ref: '#/components/schemas/timestamp'
        updatedAt:
          $ref: '#/components/schemas/timestamp'

    roles:
      type: string
      enum:
        - USER

    referenceDataTypes:
      type: array
      items:
        $ref: '#/components/schemas/referenceDataType'

    referenceDataType:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/uuid'
        name:
          type: string
        description:
          type: string
          nullable: true
        createdAt:
          $ref: '#/components/schemas/timestamp'
        updatedAt:
          $ref: '#/components/schemas/timestamp'

    applicationTypes:
      type: array
      items:
        $ref: '#/components/schemas/applicationType'

    applicationType:
      allOf:
        - $ref: '#/components/schemas/referenceDataType'
        - type: object
          properties:
            refNoSuffix:
              type: string

    optionSetTypes:
      type: object
      additionalProperties:
        type: object
        items:
          $ref: '#/components/schemas/optionSetType'

    optionSetType:
      type: object
      additionalProperties: false
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/objectSet'
        createdAt:
          $ref: '#/components/schemas/timestamp'
        updatedAt:
          $ref: '#/components/schemas/timestamp'

    objectSet:
      type: object
      properties:
        value:
          type: number
        description:
          type: string

    address:
      type: object
      properties:
        addressLine1:
          type: string
          minLength: 1
          maxLength: 80
        addressLine2:
          type: string
          minLength: 1
          maxLength: 80
        subBuildingName:
          type: string
          minLength: 1
          maxLength: 80
        buildingName:
          type: string
          minLength: 1
          maxLength: 80
        buildingNumber:
          type: string
          minLength: 1
          maxLength: 80
        street:
          type: string
          minLength: 1
          maxLength: 80
        locality:
          type: string
          minLength: 1
          maxLength: 80
        dependentLocality:
          type: string
          minLength: 1
          maxLength: 80
        town:
          type: string
          minLength: 1
          maxLength: 80
        county:
          type: string
          minLength: 1
          maxLength: 80
        country:
          type: string
          minLength: 1
          maxLength: 50
        postcode:
          type: string
          minLength: 1
          maxLength: 10
        uprn:
          type: string
          minLength: 1
          maxLength: 12
        xCoordinate:
          type: number
        yCoordinate:
          type: number

    gridReference:
      type: string

    timestamp:
      type: string
      readOnly: true
      example: 2021-12-06T15:56:46.825Z
      nullable: true
      pattern: ^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}\.[0-9]{3}Z$

    date:
      type: string
      readOnly: true
      example: 2021-12-06
      pattern: ^[0-9]{4}-[0-9]{2}-[0-9]{2}$

    uuid:
      type: string
      pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
      example: 5e790ab3-c37a-4e4c-a19d-97fb72cdbd42
      minLength: 36
      maxLength: 36
      nullable: true

    option:
      type: integer
      minimum: 0
      maximum: 999999999

    email:
      type: string
      pattern: (?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])
      example: email@email.com

    phone:
      type: string

    error:
      type: object
      required:
        - code
      properties:
        code:
          type: number
        error:
          type: object
        errors:
          type: array
          items:
            type: object
